(defun arrow-right-xpm (color1 color2)
  "Return an XPM right arrow string representing."
  (format "/* XPM */
static char * arrow_right[] = {
\"12 18 2 1\",
\". c %s\",
\"  c %s\",
\".           \",
\"..          \",
\"...         \",
\"....        \",
\".....       \",
\"......      \",
\".......     \",
\"........    \",
\".........   \",
\".........   \",
\"........    \",
\".......     \",
\"......      \",
\".....       \",
\"....        \",
\"...         \",
\"..          \",
\".           \"};"  color1 color2))

(defun arrow-left-xpm (color1 color2)
  "Return an XPM right arrow string representing."
  (format "/* XPM */
static char * arrow_right[] = {
\"12 18 2 1\",
\". c %s\",
\"  c %s\",
\"           .\",
\"          ..\",
\"         ...\",
\"        ....\",
\"       .....\",
\"      ......\",
\"     .......\",
\"    ........\",
\"   .........\",
\"   .........\",
\"    ........\",
\"     .......\",
\"      ......\",
\"       .....\",
\"        ....\",
\"         ...\",
\"          ..\",
\"           .\"};"  color2 color1))


(defvar color1 "#FF6699")
(defvar color2 "#FF0066")
(defvar color3 "#ff6347")
(defvar color4 "#2B2B2B")

(defvar arrow-right-1 (create-image (arrow-right-xpm color1 color2) 'xpm t :ascent 'center))
(defvar arrow-right-2 (create-image (arrow-right-xpm color2 color3) 'xpm t :ascent 'center))
(defvar arrow-right-3 (create-image (arrow-right-xpm color3 "None") 'xpm t :ascent 'center))
(defvar arrow-left-1  (create-image (arrow-left-xpm color2 color1) 'xpm t :ascent 'center))
(defvar arrow-left-2  (create-image (arrow-left-xpm "None" color2) 'xpm t :ascent 'center))

(setq-default mode-line-format
 (list  '(:eval (concat (propertize " %Z " 'face 'mode-line-color-1)
                        (propertize " " 'display arrow-right-1)))
        '(:eval (concat (propertize " %* %b " 'face 'mode-line-color-2)
                        (propertize " " 'display arrow-right-2)))
        '(:eval (concat (propertize " %m " 'face 'mode-line-color-3)
                        (propertize " " 'display arrow-right-3)))

        ;; Justify right by filling with spaces to right fringe - 16
        ;; (16 should be computed rahter than hardcoded)
        '(:eval (propertize " " 'display '((space :align-to (- right-fringe 17)))))

        '(:eval (concat (propertize " " 'display arrow-left-2)
                        (propertize " %4l:%2c " 'face 'mode-line-color-2)))
        '(:eval (concat (propertize " " 'display arrow-left-1)
                        (propertize " %p " 'face 'mode-line-color-1)))
)) 

(make-face 'mode-line-color-1)
(set-face-attribute 'mode-line-color-1 nil
                    :foreground "#fff"
                    :background color1)

(make-face 'mode-line-color-2)
(set-face-attribute 'mode-line-color-2 nil
                    :foreground "#fff"
                    :background color2)

(make-face 'mode-line-color-3)
(set-face-attribute 'mode-line-color-3 nil
                    :foreground "#fff"
                    :background color3)

(set-face-attribute 'mode-line nil
                    :foreground "#fff"
                    :background color4
                    :box nil)
(set-face-attribute 'mode-line-inactive nil
                    :foreground "#fff"
                    :background color4)


;; (setq-default
;;  mode-line-format
;;  (list
;;   ""
;;   'mode-line-mule-info
;;   'mode-line-modified
;;   " " ;mode-line-frame-identification
;;   "%1b" ;->'mode-line-buffer-identification
;;   " "  'global-mode-string
;;   "%[<"
;;   'mode-name
;;   ">"
;;   'mode-line-process
;;   'minor-mode-alist
;;   " "
;;   "%]"
;;   '(which-func-mode ("" which-func-format ""))
;;   "["
;;   '(line-number-mode "%l:")
;;   '(column-number-mode "%c:")
;;   "%P"
;;   "] "
;;   'default-directory))
;; ("%e"
;;  (:eval (if (display-graphic-p)
;;             #(" " 0 1 (help-echo "mouse-1: Select (drag to resize)
;; mouse-2: Make current window occupy the whole frame
;; mouse-3: Remove current window from display"))
;;           #("-" 0 1 (help-echo "mouse-1: Select (drag to resize)
;; mouse-2: Make current window occupy the whole frame
;; mouse-3: Remove current window from display"))))
;;  mode-line-mule-info
;;  mode-line-client
;;  mode-line-modified
;;  mode-line-remote
;;  mode-line-frame-identification
;;  mode-line-buffer-identification
;;  #("   " 0 3 (help-echo "mouse-1: Select (drag to resize)
;; mouse-2: Make current window occupy the whole frame
;; mouse-3: Remove current window from display"))
;;  mode-line-position
;;  (vc-mode vc-mode)
;;  #("  " 0 2 (help-echo "mouse-1: Select (drag to resize)
;; mouse-2: Make current window occupy the whole frame
;; mouse-3: Remove current window from display"))
;;  mode-line-modes
;;  (which-func-mode ("" which-func-format #(" " 0 1 (help-echo "mouse-1: Select (drag to resize)
;; mouse-2: Make current window occupy the whole frame
;; mouse-3: Remove current window from display"))))
;;  (global-mode-string ("" global-mode-string #(" " 0 1 (help-echo "mouse-1: Select (drag to resize)
;; mouse-2: Make current window occupy the whole frame
;; mouse-3: Remove current window from display"))))
;;  (:eval (unless (display-graphic-p) #("-%-" 0 3 (help-echo "mouse-1: Select (drag to resize)
;; mouse-2: Make current window occupy the whole frame
;; mouse-3: Remove current window from display"))))
;; )
